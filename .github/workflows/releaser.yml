name: Releaser

on:
  push:
    tags:
      - 'v*' # Trigger on tags that follow semantic versioning

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install dependencies
        run: npm ci --include=dev

      - name: Set Secrets
        run: |
          echo DB_HOST=${{secrets.DB_HOST}} >> .env
          echo DB_PORT=${{secrets.DB_PORT}} >> .env
          echo DB_USER=${{secrets.DB_USER}} >> .env
          echo DB_PASSWORD=${{secrets.DB_PASSWORD}} >> .env
          echo DB_DATABASE=${{secrets.DB_DATABASE}} >> .env
          echo AUTH_SECRET=${{secrets.AUTH_SECRET_TEST}} >> .env
          echo AUTH_GITHUB_ID=${{secrets.AUTH_GITHUB_ID_TEST}} >> .env
          echo AUTH_GITHUB_SECRET=${{secrets.AUTH_GITHUB_SECRET_TEST}} >> .env
          echo AUTH_GOOGLE_ID=${{secrets.AUTH_GOOGLE_ID_TEST}} >> .env
          echo AUTH_GOOGLE_SECRET=${{secrets.AUTH_GOOGLE_SECRET_TEST}} >> .env

      - name: Build the application
        run: npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container versioned image
        run: |
          VERSION=$(echo "${GITHUB_REF}" | grep -oP '(?<=tags\/v)[0-9]+\.[0-9]+\.[0-9]+')
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):${VERSION}"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Build and push container latest image
        run: |
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):latest"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
